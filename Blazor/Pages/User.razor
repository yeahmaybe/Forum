@page "/user/{UserId}"
@using Blazor.Services;
@using Blazor.Data.Models

@if (CurrentUser != null)
{
    <div class="userBlock">
        <div class="field">
            <label class="label">Идентификатор</label> <input class="form-control valueField" type="text" value="@CurrentUser.Id" aria-label="Disabled input example" disabled readonly>
        </div>
        <div class="field">
            <label class="label">Имя</label> <input class="form-control valueField" type="text" value="@CurrentUser.Username" aria-label="Disabled input example" disabled readonly>
        </div>
        <div class="field">
            <label class="label">Никнейм</label> <input class="form-control valueField" type="text" value="@CurrentUser.Nickname" aria-label="Disabled input example" disabled readonly>
        </div>
        <div class="field">
            <label class="label">Роль</label> <input class="form-control valueField" type="text" value="@CurrentUser.Role" aria-label="Disabled input example" disabled readonly>
        </div>
    </div>
    <h3>Публикации</h3>
    <table class="table">
<thead>
<th >Название</th>
<th >Дата публикации</th>
<th >Содержание</th>
</thead>
<tbody>
@foreach (var post in CurrentUser.Posts)
{
    <tr >
        <td>@post.Label</td>
        <td>@post.Date</td>
        <td>@post.Content</td>
    </tr>
}
</tbody>
    </table>
    <h3>Активность</h3>
    <table class="table">
        <thead>
        <th>Дата</th>
        <th >Содержание</th>
        </thead>
        <tbody>
        @foreach (var comment in CurrentUser.Comments)
        {
            <tr >
                <td>@comment.Date</td>
                <td>@comment.Content</td>
            </tr>
        }
        </tbody>
    </table>
    
    @code {
        [Parameter]
        public string UserId { get; set; }
        public List<Data.Models.User> Users { get; set; }
        public Data.Models.User? CurrentUser { get; set; }
        [Inject]
        private IUserProvider userProvider { get; set; }
        protected async override Task OnInitializedAsync()
        {
            CurrentUser  = await userProvider.GetOne(Int32.Parse(UserId));
            Users = await userProvider.GetAll();
            Console.WriteLine(CurrentUser);
            base.OnInitialized();
        }
    }
}



